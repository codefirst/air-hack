#!/usr/bin/env ruby
require "airplay"
require "redis"
require_relative "../config/initializers/redis"

class AirPlayAgent
  def initialize(device_name)
    @player = Airplay[device_name].player
    @skip_requested = false

    Thread.new do
      client = Redis.current.client
      subscriber = Redis.new(:host => client.host, :port => client.port)
      subscriber.subscribe(:skip) do |on|
        on.message { @skip_requested = true }
      end
    end
  end

  def start_playing
    while true
      begin
        key_for_next_song = Redis.current.lindex("playlist", 0)
        sleep 1 and next unless key_for_next_song
        $stderr.puts "Playing: #{key_for_next_song}"

        song_data = eval(Redis.current.get(key_for_next_song))
        $stderr.puts "Song data: #{song_data.inspect}"
      rescue Redis::CannotConnectError => e
        $stderr.puts "Redis connection error"
        sleep 10 and next
      end

      @player.playlist << song_data[:url]
      @player.play
      wait

      Redis.current.del(key_for_next_song) rescue Redis::CannotConnectError
      begin
        Redis.current.lpop("playlist")
        File::delete(song_data[:path])
        File::delete("#{song_data[:path]}.artwork.jpg")
      rescue => e
        $stderr.puts e.inspect
      end
    end
  end

  private
  def wait
    Thread.pass and sleep 1 while wait_for_playback?
    @player.cleanup
  end

  def wait_for_playback?
    if @skip_requested
      @skip_requested = false
      @player.pause
    end

    return true if @player.playlist.next?
    @player.loading? || @player.playing?
  end
end

$stderr.puts "Start AirPlay agent"
agent = AirPlayAgent.new("Apple TV")
$stderr.puts "Found AppleTV: #{agent}"
agent.start_playing
